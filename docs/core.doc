## rptr.extend
<br />
#### Definition:
``rptr.extend(destination, source, by_value)``

#### Parameters:
* destination - {Object}  the object to extend
* source - {Object} the object to extend from
* by_value - {Boolean} should it extend by value or by reference (defaults false)

#### Usage:

    var dest = {};
    var src = {
        'a' : {
            'b' : 'c'
        }
    }
    
	rptr.extend(dest, src);
    
	=>	dest = {
			'a' : {
				'b' : 'c'
			}
		}

## rptr.merge
<br />
#### Definition:
``rptr.merge(destination, source, by_value)``

#### Parameters:
* destination - {Object}  the object to extend
* source - {Object} the object to extend from
* by_value - {Boolean} should it extend by value or by reference (defaults false)

#### Usage:

    var dest = {
		'a' : {
			'b' : 'something'
		}
	};
    var src = {
        'a' : {
            'b' : 'c',
			'd' : 'e'
        }
    }
    
	rptr.extend(dest, src);
	=>	dest = {
			'a' : {
				'b' : 'something',
				'd' : 'e'
			}
		}

## rptr.branch
<br />
#### Definition
``rptr.branch(destination, path, data)``

#### Parameters:
* destination - {Object} the object to branch
* path - {Array} the property path to trace
* data - {*} data to insert at end of path (optional)

#### Usage:

	var dest = {};
	var path = ['a', 'b', 'c'];
	var data = 'blah';
	
	rptr.branch(dest, path, data);
	=> 	dest = {
			'a' : {
				'b' {
					'c' : 'blah'
				}
			}
		}
		
	rptr.branch(dest, path);
	=>	true
	
	rptr.branch(dest, ['d', 'e']);
	=> false
	
## rptr.remote_extend
<br />
#### Definition
``rptr.remote_extend(config)``

#### Parameters:
* config - {object}

#### Usage:

	var destination = {};

	rptr.remote_extend({
		destination : destination,
		new_property : 'to_be_populated',
		url : '/user/1/edit.json',
		process : function() {
			
			// optional, can process the incoming data and whatever it returns will populate the new_property
			
		},
		callback : function() {
			
			// do things once the data is populated
			
			=> 	destination = {
					'to_be_populated' : {
						'name' : 'Damian',
						'friends' : 0
					}
				}
		}
	});

## rptr.throttle
<br />
#### Definition
``rptr.throttle(id, interval, fn)``

#### Parameters:
* id {String} - unique among other current throttling
* interval {Number} - milliseconds to throttle
* fn {Function} - the function to prevent overcalling

#### Usage:

	rptr.subscribe(link, 'click', function(e) {
		e.preventDefault();
		rptr.throttle('link click', 100, function() {
			for (var i = 0; i < 100000; i++) // do something crazy
		});
	});
	
	=> The above event will only be allowed to fire once every 100 milliseconds.. which is good
	because it looks pretty darn expensive.

## rptr.type
<br />
#### Definition
``rptr.type(types, data)``

#### Parameters:
* types {String|Array} - type or types to test for
* data {*} - data to test

#### Usage:
	
	rptr.type(['Object', 'Number'], []);
	=> false
	
	rptr.type('String', 'A man, a plan...');
	=> true
	
